#pragma once

#include "compressed/macros.h"
#include "compressed/fwd.h"


namespace NAMESPACE_COMPRESSED_IMAGE
{

	// Custom iterator
	template <typename T, std::size_t N>
	struct group_iterator
	{

		// ---------------------------------------------------------------------------------------------------------------------
		// ---------------------------------------------------------------------------------------------------------------------
		group_iterator(strided_span_group<T, N> group, std::size_t index)
			: m_Group(group), m_Index(index)
		{
		}

		// ---------------------------------------------------------------------------------------------------------------------
		// ---------------------------------------------------------------------------------------------------------------------
		constexpr std::size_t operator*()
		{
			return m_Index;
		}

		// ---------------------------------------------------------------------------------------------------------------------
		// ---------------------------------------------------------------------------------------------------------------------
		constexpr group_iterator& operator++()
		{
			++m_Index;
			return *this;
		}

		// ---------------------------------------------------------------------------------------------------------------------
		// ---------------------------------------------------------------------------------------------------------------------
		constexpr bool operator!=(const group_iterator& other) const
		{
			return m_Index != other.m_Index;
		}

		// ---------------------------------------------------------------------------------------------------------------------
		// ---------------------------------------------------------------------------------------------------------------------
		constexpr auto operator*() const
		{
			return m_Group[m_Index];
		}

	private: 
		const strided_span_group<T, N> m_Group;
		std::size_t m_Index;
	};

} // NAMESPACE_COMPRESSED_IMAGE